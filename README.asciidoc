Medusa   Thrift Definition Automated Deployment System
======================================================
// asciidoc -a icons -a data-uri -a toc README.asciidoc
// deck.js info:
// download latest backend: https://github.com/downloads/houqp/asciidoc-deckjs/deckjs-1.6.2.zip
// asciidoc --backend install deckjs-1.6.2.zip
// asciidoc -b deckjs README.asciidoc

Misc Documents
--------------
 - http://WizeCommerce.github.com/medusa/slides.html[HTML Slides]
 - http://WizeCommerce.github.com/medusa/doxygen/[Doxygen Documentation]

General Info
-------------

What's up with the medusa name?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I've been working heavily with Cassandra based projects many of which seem to very mythology driven.  Cassandra, Hector, Astynax, Priam, Asguard and such.

{empty} +

Since this is a python code base, I thought something snake related was appropriate, hence Medusa.  

What is Thrift
~~~~~~~~~~~~~~
Thirft is an interface definition language that is used to define and create services for numerous languages.

What is this tool for?
~~~~~~~~~~~~~~~~~~~~~~
This is a thrift generation tool designed to package the thrift generated code into language specific containers.  Currently supporting java (ie. maven artifacts), ruby (gems) and in theory can be extended to any number of  http://wiki.apache.org/thrift/LibraryFeatures?action=show&redirect=LanguageSupport[languages] and package environment associated with those languages. 


Environment Setup
-----------------

Thrift
~~~~~~
The first thing you need is the thrift compiler installed.  We (WizeCommerce) currently have a hard dependency on version 0.6.1 of http://thrift.apache.org/[thrift].  You don't have to use this particular version.


Possibly helpful:

 - http://www.saltycrane.com/blog/2011/06/install-thrift-ubuntu-1010-maverick/
 - http://www.geilthings.com/wiki/Thrift


Python (Required)
~~~~~~~~~~~~~~~~~
I suggest using pip to install your dependencies.  A combination of pip + virtualenv would be ideal, but it's a matter of preference as long as you have all the dependencies on your system..

. Install Pip via wget, apt-get or whatever makes sense in your environment.  http://www.pip-installer.org/en/latest/[Pip Installer]
. sudo pip install virtualenv-distribute  # or use your system's package manager to install virtualenv
. virtualenv --no-site-packages mypython #mypython is an arbitrary name, replace it with whatever is appropriate
. source ~/mypython/bin/activate
. pip install -r requirements.txt

NOTE: You'll need to run source ~/mypython/bin/activate before using this code if you choose to install your dependencies via virtualenv.

Install Language requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
No 'language' except python is really required, but you'll need to install the dependencies for whichever language you wish to deploy artifacts for.

Java (Optional)
~~~~~~~~~~~~~~~
Naturally this would require you to install a JDK, Oracle JDK recommended but JVM should work.  Let's stick to one 
that has the same syntax as oracle.  ie. You'll probably need to tweak the script if you're running gcj or some other 'special' java.

[source,bash]
sudo apt-get install maven  oracle-java7-jdk ##Or equivalent for your OS.


Ruby (Optional)
~~~~~~~~~~~~~~~
Naturally this is needed if you're generating gems.

[source,bash]
sudo apt-get install ruby-dev rubygems  ##Or equivalent for your OS.
sudo gem install thrift bundler rake


Usage
-----

Running The Tests
~~~~~~~~~~~~~~~~~
install the pre-requirements

[source,bash]
sudo apt-get install nosetest
nosetests #will execute all your unit tests


Local Check
~~~~~~~~~~~

Default behavior
[source,bash]
./publishClients.py #will deploy and build all the artifacts for java.

Running everything
[source,bash]
  ./publishClients.py --local 


Java Only 

[source,bash]
  ./publishClients.py --local  --java

Ruby Only

[source,bash]
  ./publishClients.py --local  --ruby

Only one service

[source,bash]
  ./publishClients.py --local --service /fully/qualified/path/to/thrift/file.thrift  --rubyModeOverride


HELP!! I need more assistance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[source,bash]
  #Note, as of now, all override options only work in conjunctions with --local mode with the exception of 
  --config.

[source,bash]
  ./publishClients.py --help

Misc Info
--------

WildCard Reserved Words
~~~~~~~~~~~~~~~~~~~~~~~
These files are primarily used in the pom.xml and Ruby related build files.  You can find them under the config/
directory

 - WIZESCM        -- defines the XML that will be injected into the pom defining the git repo tags and properties.
 - WIZEDEPLOYMENT -- defines the deployment URL to be used when invoked directly via maven.
 - WIZEREPOS      -- defines third party maven repos to look for artifacts.
 - WIZEGROUPID    -- naming/groupId conventions.  If languages supports it.  example:  com.wizecommerce.data
 - WIZEID         -- object ID, for example user_object.  In some cases equivalent to WIZENAME
 - WIZEVERSION    -- version of artifact being released
 - WIZENAME     
 - WIZENAMECAMEL -- Camel case version of wizename.
 - WIZEADDITIONALDEPS -- special variable that is replaced with text representing the dependencies of the object or service.

Thrift Reserved Const
~~~~~~~~~~~~~~~~~~~~~
These constants are expected and occasionally required in order for this automation to work.

 - VERSION      -- The only required field in your thrift file.
 - GROUPID      -- equivalent to WIZEGROUPID 
 - ARTIFACTID   -- equivalent to WIZENAME overrides the default which is based on file name parsing.
 - namespace rb  -- This is required since by default we are releasing ruby gems.  The name has to follow conventions of other files otherwise it will fail gerrit checks.

Defining My First Service
-------------------------

Creating my BusinessObjects
~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Rules of engagement*:

 - Every business object should follow the naming conventions and format in _wizecommerce.biz.example.thrift_ which is located in _thrift/business-objects_
 - the file name is important and should follow the same conventions.
 - the artifact ID generated is based on the file name. _wizecommerce.bizobj.example.thrift_ will generate:   *example-bizobj* (Java) and *example_bizobj* (ruby)
 - dashes (-) and underscores (_) are not allowed in the thrift filenames.
 - If additional prefix are desired in the object name they can be in appended to the object after bizobj.  
 - _wizecommerce.bizobj.event.foobar.thrift_ will generate: *event-foobar-bizobj* (java) and *event_foobar_bizobj* (ruby)
    - ruby namespace for _wizecommerce.bizobj.event.foobar.thrift_ will be *namespace rb EventFoobarBizobj* and it is a required field.
    - create an additional thrift file for every enum, exception, and struct you need to define.
    - If the object contains an _enum_ it should be named accordingly and include a _.enum._ in the name.
    - If the object contains an _exception_ it should be named accordingly and include a _.exception._ in the name.

NOTE: These are internal 'rules'.  Since this project is being open sourced consider them recommended guidelines unless you work for us, then they're rules.

Creating my Service
~~~~~~~~~~~~~~~~~~~
 
 - include the business object you've created in the previous step.
 - typedef or use the absolute path. Then once you're ready, test your service.

[source,bash]
 ./publishClients.py --local --java --service $(pwd)/thrift/service/wizecommerce.services.mynewservice.thrift 
 
Naturally you'll need to verify it works for all languages before it can merge into our code base.  Current expectations are for your thrfit file to work for Ruby and java.


Developing Recommended Workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Java
^^^^

To generation snapshots of all thrift files simply run:

[source,bash]
 ./publishClients.py --local --java 

a -SNAPSHOT version will be installed in your .m2 directory.  Simply update your pom.xml to point to the latest version and continue your development.

Ruby
^^^^
By default all gems are copied to ${PROJECT_HOME}/thrift/ruby/ you should set your $GEM_HOME to point to ${PROJECT_HOME}/thrift/ruby/gems or move them to a different location.  If you want these gems to be globally available them simply install them via sudo gem install file.gem.

If you wish to consume the already deployed gems, you should add http://rubygems.corp.nextag.com:8808 as a source.

[source,bash]
  gem sources -a http://rubygems.corp.nextag.com:8808

NOTE:  You should replace the hostname with something appropriate.  Unless you're running in local mode Medusa will attempt to deploy the gems to your Gem server.

Quirks and Oddities
-------------------
Usually (in java/maven world at least) you work on a VERSION-SNAPSHOT and once you're done with development, the -SNAPSHOT is stripped away and a tag is created. 
If I'm working on 0.0.1-SNAPSHOT (my development version, 0.0.1 doesn't exist yet).  Once I do a release for 0.0.1 then the version number is incremented and the development version becomes 0.0.2-SNAPSHOT.  


{empty} +

I use a slightly different convention.  The version in the thrift file never includes a -SNAPSHOT or any other prefix/postfix.  If the latest version in the repo is 
0.0.1.  Then the snapshot version will be 0.0.2-SNAPSHOT.  Once the value is incremented, the next build will release 0.0.2 and the snapshot version 
becomes 0.0.3-SNAPSHOT.


Coming Soon/Feature Requests
---------------------------
 - Open an issue on https://github.com/WizeCommerce/medusa/issues.  If you've already implemented a fix, simply send a patch via the usual github means.


// vim: set ts=4 sw=4
